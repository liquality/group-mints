System.register(["./index-legacy-67e8bfb9.js"],(function(e,a){"use strict";var t,r,s,n,o,c,d,u,l,i,f;return{setters:[e=>{t=e.ao,r=e.ap,s=e.aq,n=e.ar,o=e.as,c=e.at,d=e.au,u=e.av,l=e.aw,i=e.ax,f=e.ay}],execute:function(){e({ccipFetch:y,offchainLookup:async function(e,{blockNumber:t,blockTag:r,data:s,to:i}){const{args:f}=c({data:s,abi:[b]}),[h,m,w,g,k]=f;try{if(!function(e,a){if(!n(e))throw new o({address:e});if(!n(a))throw new o({address:a});return e.toLowerCase()===a.toLowerCase()}(i,h))throw new p({sender:h,to:i});const a=await y({data:w,sender:h,urls:m}),{data:s}=await d(e,{blockNumber:t,blockTag:r,data:u([g,l([{type:"bytes"},{type:"bytes"}],[a,k])]),to:i});return s}catch(x){throw new a({callbackSelector:g,cause:x,data:s,extraData:k,sender:h,urls:m})}}});class a extends t{constructor({callbackSelector:e,cause:a,data:t,extraData:s,sender:n,urls:o}){var c;super(a.shortMessage||"An error occurred while fetching for an offchain result.",{cause:a,metaMessages:[...a.metaMessages||[],null!==(c=a.metaMessages)&&void 0!==c&&c.length?"":[],"Offchain Gateway Call:",o&&["  Gateway URL(s):",...o.map((e=>`    ${r(e)}`))],`  Sender: ${n}`,`  Data: ${t}`,`  Callback selector: ${e}`,`  Extra data: ${s}`].flat()}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupError"})}}class h extends t{constructor({result:e,url:a}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${r(a)}`,`Response: ${s(e)}`]}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupResponseMalformedError"})}}class p extends t{constructor({sender:e,to:a}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${a}`,`OffchainLookup sender address: ${e}`]}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupSenderMismatchError"})}}e("offchainLookupSignature","0x556f1830");const b=e("offchainLookupAbiItem",{name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]});async function y({data:e,sender:a,urls:t}){let r=new Error("An unknown error occurred.");for(let c=0;c<t.length;c++){const d=t[c],u=d.includes("{sender}")||d.includes("{data}")?"GET":"POST",l="POST"===u?{data:e,sender:a}:void 0;try{var n;const t=await fetch(d.replace("{sender}",a).replace("{data}",e),{body:JSON.stringify(l),method:u});let o;if(o=null!==(n=t.headers.get("Content-Type"))&&void 0!==n&&n.startsWith("application/json")?(await t.json()).data:await t.text(),!t.ok){r=new i({body:l,details:s(o.error)||t.statusText,headers:t.headers,status:t.status,url:d});continue}if(!f(o)){r=new h({result:o,url:d});continue}return o}catch(o){r=new i({body:l,details:o.message,url:d})}}throw r}}}}));
